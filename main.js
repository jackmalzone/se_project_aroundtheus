!function(){"use strict";document.querySelector("#card-template").content;const e=document.querySelector("#profile-edit-modal"),t=document.querySelector("#profile-add-modal"),s=document.querySelector("#profile-avatar-modal"),n=document.querySelector("#profile-preview-modal"),r=e.querySelector("#edit-card-form"),o=t.querySelector("#add-card-form"),a=s.querySelector("#edit-avatar-form"),i=(document.querySelector(".cards__list"),document.querySelector("#profile-edit-button")),l=(e.querySelector("#modal-button-close"),t.querySelector("#modal-button-close"),document.querySelector("#profile-add-button")),c=document.querySelector("#profile-avatar-button");s.querySelector("#modal-button-close"),n.querySelector("#modal-button-close"),n.querySelector(".modal__image"),n.querySelector(".modal__heading");const d=document.querySelector("#modal-input-name"),u=document.querySelector("#modal-input-description"),h=(o.querySelector("#modal-input-name"),o.querySelector("#modal-input-link"),{formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__submit-button_inactive",inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error_active"}),m=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}async _request(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};console.log("Headers: ",this._headers);const s=await fetch(`${this._baseUrl}${e}`,{...t,headers:this._headers});return this._checkResponse(s)}async getInitialCards(){return this._request("/cards")}async getUserInfo(){return this._request("/users/me")}async updateProfile(e){return this._request("/users/me",{method:"PATCH",body:JSON.stringify(e)})}async updateAvatar(e){return this._request("/users/me/avatar",{method:"PATCH",body:JSON.stringify({avatar:e})})}async addCard(e){return this._request("/cards",{method:"POST",body:JSON.stringify(e)})}async deleteCard(e){return this._request(`/cards/${e}`,{method:"DELETE"})}async likeCard(e){return this._request(`/cards/${e}/likes`,{method:"PUT"})}async unlikeCard(e){return this._request(`/cards/${e}/likes`,{method:"DELETE"})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{Authorization:"4e792af1-5796-4959-889f-63e7625cacce","Content-Type":"application/json"}});var _=m;class p{constructor(e,t,s,n){this._name=e.name,this._link=e.link,this._alt=e.alt,this._cardSelector=t,this._handleImageClick=s,this._id=e._id,this._likes=e.likes||[],this._currentUserId=n,console.log("Card Data:",e),console.log("Card ID:",this._id),console.log("Likes Array:",this._likes),this._isLiked=this._likes.some((e=>e._id===this._currentUserId))}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this._handleLikeButton()})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleDeleteButton()})),this._cardElement.querySelector(".card__image").addEventListener("click",(()=>{this._handleImageClick(this._link,this._alt,this._name)}))}async _handleLikeButton(){const e=this._cardElement.querySelector(".card__like-button");try{if(this._isLiked){const t=await _.unlikeCard(this._id);console.log("Updated Card after unlike:",t),this._isLiked=t.likes.some((e=>e._id===this._currentUserId)),e.classList.remove("card__like-button_active")}else{const t=await _.likeCard(this._id);console.log("Updated Card after like:",t),this._isLiked=t.likes.some((e=>e._id===this._currentUserId)),e.classList.add("card__like-button_active")}}catch(e){console.error("Error liking/unliking card:",e)}}async _handleDeleteButton(){try{await _.deleteCard(this._id),this._cardElement.remove(),this._cardElement=null}catch(e){console.error("Error deleting card:",e)}}getView(){const e=document.querySelector(this._cardSelector);this._cardElement=e.content.firstElementChild.cloneNode(!0);const t=this._cardElement.querySelector(".card__image"),s=this._cardElement.querySelector(".card__caption"),n=this._cardElement.querySelector(".card__like-button");return t.src=this._link,t.alt=this._alt,s.textContent=this._name,this._isLiked&&n.classList.add("card__like-button_active"),this._setEventListeners(),this._cardElement}}class g{constructor(e,t){this._settings=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._settings.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.textContent="",t.classList.remove(this._settings.errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():(this._submitButton.classList.remove(this._settings.inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this._toggleButtonState()}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}disableButton(){this._submitButton.classList.add(this._settings.inactiveButtonClass),this._submitButton.disabled=!0}}class y{constructor(e){this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this),this._handleMouseDown=this._handleMouseDown.bind(this),this._handleMouseUp=this._handleMouseUp.bind(this),this._isMouseDownOnModal=!1}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}_handleMouseDown(e){e.target.classList.contains("modal_opened")?this._isMouseDownOnModal=!0:this._isMouseDownOnModal=!1}_handleMouseUp(e){this._isMouseDownOnModal&&e.target.classList.contains("modal_opened")&&this.close(e.target),this._isMouseDownOnModal=!1}setEventListeners(){this._popupElement.addEventListener("mousedown",this._handleMouseDown),this._popupElement.addEventListener("mouseup",this._handleMouseUp),this._popupElement.querySelector(".modal__close").addEventListener("click",(()=>this.close()))}}class E extends y{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputs=Array.from(this._popupForm.querySelectorAll(".modal__input")),this._submitButton=this._popupForm.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent}_getInputValues(){return this._inputValues={},this._inputs.forEach((e=>{this._inputValues[e.name]=e.value})),this._inputValues}setEventListeners(){super.setEventListeners(),this._submitHandler=async e=>{e.preventDefault();try{await this._handleFormSubmit(this._getInputValues()),this.close()}catch(e){console.error("Error submitting form:",e)}finally{this.renderLoading(!1)}},this._popupForm.addEventListener("submit",this._submitHandler)}renderLoading(e){this._submitButton.textContent=e?"Saving...":this._submitButtonText}}const f=new g(h,r),v=new g(h,o),b=new g(h,a);f.enableValidation(),v.enableValidation(),b.enableValidation();const k=new class{constructor(e){let{nameSelector:t,aboutSelector:s,avatarSelector:n}=e;this._nameElement=document.querySelector(t),this._aboutElement=document.querySelector(s),this._avatarElement=document.querySelector(n),this._nameElement||console.error(`Element not found for selector: ${t}`),this._aboutElement||console.error(`Element not found for selector: ${s}`),this._avatarElement||console.error(`Element not found for selector: ${n}`)}getUserInfo(){return{name:this._nameElement.textContent,about:this._aboutElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,about:s,avatar:n}=e;t&&(this._nameElement.textContent=t),s&&(this._aboutElement.textContent=s),n&&(this._avatarElement.src=n)}async updateUserInfo(){try{const e=await _.getUserInfo();this.setUserInfo({name:e.name,about:e.about,avatar:e.avatar})}catch(e){console.error(e)}}}({nameSelector:"#profile-name",aboutSelector:"#profile-description",avatarSelector:"#profile-avatar"});let w;const S=new E("#profile-edit-modal",(async function(e){try{S.renderLoading(!0),await _.updateProfile({name:e.name,about:e.description}),k.setUserInfo({name:e.name,about:e.description}),r.reset(),f.disableButton(),S.close()}catch(e){console.error("Error updating profile:",e)}finally{S.renderLoading(!1)}})),L=new E("#profile-add-modal",(async function(e){try{L.renderLoading(!0);const t=B(await _.addCard({name:e.place,link:e.link}),w);I.addItem(t),o.reset(),v.disableButton(),L.close()}catch(e){console.error("Error adding card:",e)}finally{L.renderLoading(!1)}})),q=new E("#profile-avatar-modal",(async function(e){try{q.renderLoading(!0),await _.updateAvatar(e.link),k.setUserInfo({avatar:e.link}),a.reset(),b.disableButton(),q.close()}catch(e){console.error("Error updating avatar:",e)}finally{q.renderLoading(!1)}})),C=new class extends y{constructor(e){super(e),this._image=this._popupElement.querySelector(".modal__image"),this._place=this._popupElement.querySelector(".modal__heading_type_preview")}open(e,t,s){this._image.src=e,this._image.alt=t,this._place.textContent=s,super.open()}}("#profile-preview-modal");S.setEventListeners(),L.setEventListeners(),q.setEventListeners(),C.setEventListeners();const I=new class{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg",alt:"Sunset view of Yosemite Valley with El Capitan visible, river flowing in the foreground surrounded by dense pine trees."},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg",alt:"Calm waters of Lake Louise reflecting the surrounding mountains under a soft blue sky."},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg",alt:"Sunburst peaking over the silhouette of the Bald Mountains at sunrise, casting a warm glow across the hazy, layered ridges."},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg",alt:"Starry night sky over the jagged peaks of Latemar mountain range with remnants of snow highlighting its rugged terrain."},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg",alt:"Twilight hues casting a soft glow on the peaks of Vanoise National Park, reflected in the still waters of a mountain lake."},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg",alt:"Wooden boats moored at a dock on Lago di Braies with towering Dolomite mountains reflecting in the crystal-clear lake water."}],renderer:e=>{const t=B(e,w);I.addItem(t,!0)}},".cards__list");function B(e,t){return console.log("Creating card with user ID:",t),new p(e,"#card-template",U,t).getView()}function U(e,t,s){C.open(e,t,s)}i.addEventListener("click",(()=>{const e=k.getUserInfo();d.value=e.name,u.value=e.about,f.resetValidation(),S.open()})),l.addEventListener("click",(()=>{L.open()})),c.addEventListener("click",(()=>{q.open()})),document.addEventListener("DOMContentLoaded",(async()=>{try{const e=await _.getUserInfo();w=e._id,k.setUserInfo(e),console.log("Current User ID:",w);const t=await _.getInitialCards();console.log("Initial Cards Data:",t),t.forEach((e=>{console.log("Card Data:",e);const t=B(e,w);I.addItem(t)}))}catch(e){console.error("Error during initial load:",e)}})),I.renderItems()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,