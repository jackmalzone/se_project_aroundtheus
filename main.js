!function(){"use strict";document.querySelector("#card-template").content;const e=document.querySelector("#profile-edit-modal"),t=document.querySelector("#profile-add-modal"),s=document.querySelector("#profile-avatar-modal"),n=document.querySelector("#profile-preview-modal"),i=(e.querySelector("#edit-card-form"),t.querySelector("#add-card-form")),r=(s.querySelector("#edit-avatar-form"),document.querySelector(".cards__list"),document.querySelector("#profile-edit-button")),o=(e.querySelector("#modal-button-close"),t.querySelector("#modal-button-close"),document.querySelector("#profile-add-button")),a=document.querySelector("#profile-avatar-button");s.querySelector("#modal-button-close"),n.querySelector("#modal-button-close"),n.querySelector(".modal__image"),n.querySelector(".modal__heading"),document.querySelector("#modal-input-name"),document.querySelector("#modal-input-about"),i.querySelector("#modal-input-name"),i.querySelector("#modal-input-link");const l=document.getElementById("loading-screen"),d=document.getElementById("loading-text"),c=["exploring...","navigating...","discovering...","traveling...","adventuring..."],u=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}async _request(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};console.log("Making request to: ",`${this._baseUrl}${e}`);const s=await fetch(`${this._baseUrl}${e}`,{...t,headers:this._headers});return this._checkResponse(s)}async getInitialCards(){return this._request("/cards")}async getUserInfo(){return this._request("/users/me")}async updateProfile(e){return this._request("/users/me",{method:"PATCH",body:JSON.stringify(e)})}async updateAvatar(e){return this._request("/users/me/avatar",{method:"PATCH",body:JSON.stringify({avatar:e})})}async addCard(e){return this._request("/cards",{method:"POST",body:JSON.stringify(e)})}async deleteCard(e){return this._request(`/cards/${e}`,{method:"DELETE"})}async likeCard(e){return{isLiked:!0,...await this._request(`/cards/${e}/likes`,{method:"PUT"})}}async unlikeCard(e){return{isLiked:!1,...await this._request(`/cards/${e}/likes`,{method:"DELETE"})}}async getAppInfo(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{Authorization:"4e792af1-5796-4959-889f-63e7625cacce","Content-Type":"application/json"}});var h=u;class _{constructor(e,t,s,n,i,r){this._name=e.name,this._link=e.link,this._alt=e.alt,this._cardSelector=t,this._handleImageClick=s,this._handleCardDelete=n,this._id=e._id,this._likes=e.likes||[],this._currentUserId=r,this._isLiked=this._likes.some((e=>e._id===this._currentUserId)),this._api=i}_getTemplate(){return document.querySelector(this._cardSelector).content.firstElementChild.cloneNode(!0)}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this.toggleLike()})),this._trashButton.addEventListener("click",(()=>{this._handleCardDelete(this)})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this._link,this._alt,this._name)}))}async toggleLike(){try{let e;if(e=this._isLiked?await this._api.unlikeCard(this._id):await this._api.likeCard(this._id),console.log("Updated Card after like/unlike:",e),void 0===e.isLiked)throw new Error("Updated card data is missing 'isLiked' property.");this._isLiked=e.isLiked,this._updateLikeButton()}catch(e){console.error("Error liking/unliking card:",e)}}_updateLikeButton(){this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}async deleteCard(){try{await this._api.deleteCard(this._id),this._cardElement.remove(),this._cardElement=null}catch(e){console.error("Error deleting card:",e)}}getView(){return this._cardElement=this._getTemplate(),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._trashButton=this._cardElement.querySelector(".card__delete-button"),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardCaption=this._cardElement.querySelector(".card__caption"),this._cardImage.src=this._link,this._cardImage.alt=this._alt,this._cardCaption.textContent=this._name,this._updateLikeButton(),this._cardElement.dataset.id=this._id,this._setEventListeners(),this._cardElement}}class m{constructor(e,t){this._settings=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._settings.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.textContent="",t.classList.remove(this._settings.errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():(this._submitButton.classList.remove(this._settings.inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this._toggleButtonState()}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}disableButton(){this._submitButton.classList.add(this._settings.inactiveButtonClass),this._submitButton.disabled=!0}}class p{constructor(e){this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this),this._handleMouseDown=this._handleMouseDown.bind(this),this._handleMouseUp=this._handleMouseUp.bind(this),this._isMouseDownOnModal=!1}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}_handleMouseDown(e){e.target.classList.contains("modal_opened")?this._isMouseDownOnModal=!0:this._isMouseDownOnModal=!1}_handleMouseUp(e){this._isMouseDownOnModal&&e.target.classList.contains("modal_opened")&&this.close(e.target),this._isMouseDownOnModal=!1}setEventListeners(){this._popupElement.addEventListener("mousedown",this._handleMouseDown),this._popupElement.addEventListener("mouseup",this._handleMouseUp),this._popupElement.querySelector(".modal__close").addEventListener("click",(()=>this.close()))}}class E extends p{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputs=Array.from(this._popupForm.querySelectorAll(".modal__input")),this._submitButton=this._popupForm.querySelector(".modal__button"),this._submitButtonText=this._submitButton.childNodes[0].textContent.trim()}_getInputValues(){return this._inputValues={},this._inputs.forEach((e=>{this._inputValues[e.name]=e.value})),this._inputValues}setInputValues(e){console.log("Setting input values with data:",e),this._inputs.forEach((t=>{t.value=e[t.name]||""}))}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}renderLoading(e){this._submitButton.childNodes[0].textContent=e?"Saving...":this._submitButtonText}}const g={};var v;async function f(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Saving...";try{t.renderLoading(!0,s),await e(),t.close(),t._popupForm&&t._popupForm.reset()}catch(e){console.error("Error in handleSubmit:",e)}finally{t.renderLoading(!1)}}v={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__submit-button_inactive",inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error_active"},Array.from(document.querySelectorAll(v.formSelector)).forEach((e=>{const t=new m(v,e),s=e.getAttribute("name");g[s]=t,t.enableValidation()}));const y=new class{constructor(e,t){let{nameSelector:s,aboutSelector:n,avatarSelector:i}=e;this._nameElement=document.querySelector(s),this._aboutElement=document.querySelector(n),this._avatarElement=document.querySelector(i),this._api=t,this._nameElement||console.error(`Element not found for selector: ${s}`),this._aboutElement||console.error(`Element not found for selector: ${n}`),this._avatarElement||console.error(`Element not found for selector: ${i}`)}getUserInfo(){return{name:this._nameElement.textContent,about:this._aboutElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,about:s,avatar:n}=e;t&&(this._nameElement.textContent=t),s&&(this._aboutElement.textContent=s),n&&(this._avatarElement.src=n)}async updateUserInfo(){try{const e=await api.getUserInfo();this.setUserInfo({name:e.name,about:e.about,avatar:e.avatar})}catch(e){console.error(e)}}}({nameSelector:"#profile-name",aboutSelector:"#profile-about",avatarSelector:"#profile-avatar"},h);let S=null;function b(e){w.open((()=>{e.deleteCard().then((()=>{w.close()})).catch((e=>{console.error("Error deleting card:",e)}))}))}const L=new E("#profile-edit-modal",(function(e){return f((async function(){console.log("Updating profile with values:",e);const t=await h.updateProfile({name:e.name,about:e.about});y.setUserInfo(t)}),L)})),k=new E("#profile-add-modal",(function(e){return f((async function(){console.log("Adding card with values:",e);const t=B(await h.addCard(e),S);I.addItem(t,!0)}),k)})),q=new E("#profile-avatar-modal",(function(e){return f((async function(){console.log("Updating avatar with values:",e);const t=await h.updateAvatar(e.link);y.setUserInfo(t)}),q)})),C=new class extends p{constructor(e){super(e),this._image=this._popupElement.querySelector(".modal__image"),this._place=this._popupElement.querySelector(".modal__heading_type_preview")}open(e,t,s){this._image.src=e,this._image.alt=t,this._place.textContent=s,super.open()}}("#profile-preview-modal"),w=new class extends p{constructor(e){super(e),this._popupForm=this._popupElement.querySelector(".modal__form")}open(e){this._handleConfirmation=e,super.open()}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleConfirmation&&this._handleConfirmation()}))}}("#confirmation-modal");L.setEventListeners(),k.setEventListeners(),q.setEventListeners(),C.setEventListeners(),w.setEventListeners();const I=new class{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t)}renderItems(e){console.log("Rendering items:",e),e.forEach((e=>{console.log("Rendering item:",e),this._renderer(e)}))}addItem(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1]?this._container.prepend(e):this._container.append(e)}}({items:[],renderer:e=>{const t=B(e,S);I.addItem(t)}},".cards__list");function B(e,t){return console.log("Creating card with data:",e),new _(e,"#card-template",U,b,h,t).getView()}function U(e,t,s){C.open(e,t,s)}r.addEventListener("click",(()=>{const e=y.getUserInfo();console.log("User data for editing:",e),L.setInputValues(e),g["profile-edit-form"].resetValidation(),L.open()})),o.addEventListener("click",(()=>{g["profile-add-form"].resetValidation(),k.open()})),a.addEventListener("click",(()=>{g["profile-avatar-form"].resetValidation(),q.open()})),document.addEventListener("DOMContentLoaded",(async()=>{d.textContent=c[Math.floor(Math.random()*c.length)],console.log("DOM fully loaded and parsed");try{const e=await h.getUserInfo();S=e._id,y.setUserInfo({name:e.name,about:e.about,avatar:e.avatar}),console.log("USER ID:",S),await async function(){try{const e=await h.getInitialCards();console.log("Fetched initial cards:",e),I.renderItems(e)}catch(e){console.error("Error loading initial cards:",e)}}()}catch(e){console.error("Error during initial load:",e)}finally{l.classList.add("hidden")}}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,