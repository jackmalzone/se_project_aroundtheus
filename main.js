!function(){"use strict";document.querySelector("#card-template").content;const e=document.querySelector("#profile-edit-modal"),t=document.querySelector("#profile-add-modal"),s=document.querySelector("#profile-avatar-modal"),n=document.querySelector("#profile-preview-modal"),r=(e.querySelector("#edit-card-form"),t.querySelector("#add-card-form")),o=(s.querySelector("#edit-avatar-form"),document.querySelector(".cards__list"),document.querySelector("#profile-edit-button")),i=(e.querySelector("#modal-button-close"),t.querySelector("#modal-button-close"),document.querySelector("#profile-add-button")),a=document.querySelector("#profile-avatar-button");s.querySelector("#modal-button-close"),n.querySelector("#modal-button-close"),n.querySelector(".modal__image"),n.querySelector(".modal__heading"),document.querySelector("#modal-input-name"),document.querySelector("#modal-input-about"),r.querySelector("#modal-input-name"),r.querySelector("#modal-input-link");const l=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}async _request(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};console.log("Making request to: ",`${this._baseUrl}${e}`);const s=await fetch(`${this._baseUrl}${e}`,{...t,headers:this._headers});return this._checkResponse(s)}async getInitialCards(){return this._request("/cards")}async getUserInfo(){return this._request("/users/me")}async updateProfile(e){return this._request("/users/me",{method:"PATCH",body:JSON.stringify(e)})}async updateAvatar(e){return this._request("/users/me/avatar",{method:"PATCH",body:JSON.stringify({avatar:e})})}async addCard(e){return this._request("/cards",{method:"POST",body:JSON.stringify(e)})}async deleteCard(e){return this._request(`/cards/${e}`,{method:"DELETE"})}async likeCard(e){return{isLiked:!0,...await this._request(`/cards/${e}/likes`,{method:"PUT"})}}async unlikeCard(e){return{isLiked:!1,...await this._request(`/cards/${e}/likes`,{method:"DELETE"})}}async getAppInfo(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{Authorization:"4e792af1-5796-4959-889f-63e7625cacce","Content-Type":"application/json"}});var d=l;class c{constructor(e,t,s,n,r,o){this._name=e.name,this._link=e.link,this._alt=e.alt,this._cardSelector=t,this._handleImageClick=s,this._handleCardDelete=n,this._handleLikeButton=r,this._id=e._id,this._likes=e.likes||[],this._currentUserId=o,this._isLiked=this._likes.some((e=>e._id===this._currentUserId)),this._api=d}_getTemplate(){return document.querySelector(this._cardSelector).content.firstElementChild.cloneNode(!0)}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeButton(this)})),this._trashButton.addEventListener("click",(()=>{this._handleCardDelete(this)})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this._link,this._alt,this._name)}))}async deleteCard(){try{await this._api.deleteCard(this._id),this._cardElement.remove(),this._cardElement=null}catch(e){console.error("Error deleting card:",e)}}getView(){return this._cardElement=this._getTemplate(),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._trashButton=this._cardElement.querySelector(".card__delete-button"),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardCaption=this._cardElement.querySelector(".card__caption"),this._cardImage.src=this._link,this._cardImage.alt=this._alt,this._cardCaption.textContent=this._name,this._isLiked&&this._likeButton.classList.add("card__like-button_active"),this._cardElement.dataset.id=this._id,this._setEventListeners(),this._cardElement}}class u{constructor(e,t){this._settings=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._settings.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.textContent="",t.classList.remove(this._settings.errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():(this._submitButton.classList.remove(this._settings.inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this._toggleButtonState()}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}disableButton(){this._submitButton.classList.add(this._settings.inactiveButtonClass),this._submitButton.disabled=!0}}class h{constructor(e){this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this),this._handleMouseDown=this._handleMouseDown.bind(this),this._handleMouseUp=this._handleMouseUp.bind(this),this._isMouseDownOnModal=!1}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}_handleMouseDown(e){e.target.classList.contains("modal_opened")?this._isMouseDownOnModal=!0:this._isMouseDownOnModal=!1}_handleMouseUp(e){this._isMouseDownOnModal&&e.target.classList.contains("modal_opened")&&this.close(e.target),this._isMouseDownOnModal=!1}setEventListeners(){this._popupElement.addEventListener("mousedown",this._handleMouseDown),this._popupElement.addEventListener("mouseup",this._handleMouseUp),this._popupElement.querySelector(".modal__close").addEventListener("click",(()=>this.close()))}}class _ extends h{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputs=Array.from(this._popupForm.querySelectorAll(".modal__input")),this._submitButton=this._popupForm.querySelector(".modal__button"),this._submitButtonText=this._submitButton.childNodes[0].textContent.trim()}_getInputValues(){return this._inputValues={},this._inputs.forEach((e=>{this._inputValues[e.name]=e.value})),this._inputValues}setInputValues(e){console.log("Setting input values with data:",e),this._inputs.forEach((t=>{t.value=e[t.name]||""}))}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault();const t=this._handleFormSubmit(this._getInputValues());t&&"function"==typeof t.then?t.then((()=>this.close())).catch(console.error):console.error("handleFormSubmit did not return a promise")}))}renderLoading(e){this._submitButton.childNodes[0].textContent=e?"Saving...":this._submitButtonText}}const m={};var p;async function E(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Saving...";try{t.renderLoading(!0,s),await e(),t.close()}catch(e){console.error("Error in handleSubmit:",e)}finally{t.renderLoading(!1)}}p={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__submit-button_inactive",inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error_active"},Array.from(document.querySelectorAll(p.formSelector)).forEach((e=>{const t=new u(p,e),s=e.getAttribute("name");m[s]=t,t.enableValidation()}));const f=new class{constructor(e){let{nameSelector:t,aboutSelector:s,avatarSelector:n}=e;this._nameElement=document.querySelector(t),this._aboutElement=document.querySelector(s),this._avatarElement=document.querySelector(n),this._nameElement||console.error(`Element not found for selector: ${t}`),this._aboutElement||console.error(`Element not found for selector: ${s}`),this._avatarElement||console.error(`Element not found for selector: ${n}`)}getUserInfo(){return{name:this._nameElement.textContent,about:this._aboutElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,about:s,avatar:n}=e;t&&(this._nameElement.textContent=t),s&&(this._aboutElement.textContent=s),n&&(this._avatarElement.src=n)}async updateUserInfo(){try{const e=await d.getUserInfo();this.setUserInfo({name:e.name,about:e.about,avatar:e.avatar})}catch(e){console.error(e)}}}({nameSelector:"#profile-name",aboutSelector:"#profile-about",avatarSelector:"#profile-avatar"});let v=null;function y(e){q.open((()=>{e.deleteCard().then((()=>{q.close()})).catch((e=>{console.error("Error deleting card:",e)}))}))}async function g(e){try{let t;if(t=e._isLiked?await d.unlikeCard(e._id):await d.likeCard(e._id),void 0===t.isLiked)throw new Error("Updated card data is missing 'isLiked' property.");e._isLiked=t.isLiked,e._isLiked?e._likeButton.classList.add("card__like-button_active"):e._likeButton.classList.remove("card__like-button_active")}catch(e){console.error("Error liking/unliking card:",e)}}const S=new _("#profile-edit-modal",(function(e){return E((async function(){console.log("Updating profile with values:",e);const t=await d.updateProfile({name:e.name,about:e.about});f.setUserInfo(t)}),S)})),b=new _("#profile-add-modal",(function(e){return E((async function(){console.log("Adding card with values:",e);const t=w(await d.addCard(e),v);C.addItem(t)}),b)})),L=new _("#profile-avatar-modal",(function(e){return E((async function(){console.log("Updating avatar with values:",e);const t=await d.updateAvatar(e.link);f.setUserInfo(t)}),L)})),k=new class extends h{constructor(e){super(e),this._image=this._popupElement.querySelector(".modal__image"),this._place=this._popupElement.querySelector(".modal__heading_type_preview")}open(e,t,s){this._image.src=e,this._image.alt=t,this._place.textContent=s,super.open()}}("#profile-preview-modal"),q=new class extends h{constructor(e){super(e),this._popupForm=this._popupElement.querySelector(".modal__form")}open(e){this._handleConfirmation=e,super.open()}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleConfirmation&&this._handleConfirmation()}))}}("#confirmation-modal");S.setEventListeners(),b.setEventListeners(),L.setEventListeners(),k.setEventListeners(),q.setEventListeners();const C=new class{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t)}renderItems(e){console.log("Rendering items:",e),e.forEach((e=>{console.log("Rendering item:",e),this._renderer(e)}))}addItem(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1]?this._container.prepend(e):this._container.append(e)}}({items:[],renderer:e=>{const t=w(e,v);C.addItem(t,!0)}},".cards__list");function w(e,t){return console.log("Creating card with data:",e),new c(e,"#card-template",I,y,g,t).getView()}function I(e,t,s){k.open(e,t,s)}o.addEventListener("click",(()=>{const e=f.getUserInfo();console.log("User data for editing:",e),S.setInputValues(e),m["profile-edit-form"].resetValidation(),S.open()})),i.addEventListener("click",(()=>{m["profile-add-form"].resetValidation(),b.open()})),a.addEventListener("click",(()=>{m["profile-avatar-form"].resetValidation(),L.open()})),document.addEventListener("DOMContentLoaded",(async()=>{console.log("DOM fully loaded and parsed");try{const e=await d.getUserInfo();v=e._id,f.setUserInfo({name:e.name,about:e.about,avatar:e.avatar}),console.log("USER ID:",v),await async function(){try{const e=await d.getInitialCards();console.log("Fetched initial cards:",e),C.renderItems(e)}catch(e){console.error("Error loading initial cards:",e)}}()}catch(e){console.error("Error during initial load:",e)}}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,