!function(){"use strict";document.querySelector("#card-template").content;const e=document.querySelector("#profile-edit-modal"),t=document.querySelector("#profile-add-modal"),s=document.querySelector("#profile-avatar-modal"),r=document.querySelector("#profile-preview-modal"),n=e.querySelector("#edit-card-form"),i=t.querySelector("#add-card-form"),o=s.querySelector("#edit-avatar-form"),a=(document.querySelector(".cards__list"),document.querySelector("#profile-edit-button")),l=(e.querySelector("#modal-button-close"),t.querySelector("#modal-button-close"),document.querySelector("#profile-add-button")),d=document.querySelector("#profile-avatar-button");s.querySelector("#modal-button-close"),r.querySelector("#modal-button-close"),r.querySelector(".modal__image"),r.querySelector(".modal__heading");const c=document.querySelector("#modal-input-name"),u=document.querySelector("#modal-input-description"),h=(i.querySelector("#modal-input-name"),i.querySelector("#modal-input-link"),{formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__submit-button_inactive",inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error_active"}),_=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}async _request(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};console.log("Making request to: ",`${this._baseUrl}${e}`);const s=await fetch(`${this._baseUrl}${e}`,{...t,headers:this._headers});return this._checkResponse(s)}async getInitialCards(){return this._request("/cards")}async getUserInfo(){return this._request("/users/me")}async updateProfile(e){return this._request("/users/me",{method:"PATCH",body:JSON.stringify(e)})}async updateAvatar(e){return this._request("/users/me/avatar",{method:"PATCH",body:JSON.stringify({avatar:e})})}async addCard(e){return this._request("/cards",{method:"POST",body:JSON.stringify(e)})}async deleteCard(e){return this._request(`/cards/${e}`,{method:"DELETE"})}async likeCard(e){return{isLiked:!0,...await this._request(`/cards/${e}/likes`,{method:"PUT"})}}async unlikeCard(e){return{isLiked:!1,...await this._request(`/cards/${e}/likes`,{method:"DELETE"})}}async getAppInfo(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{Authorization:"4e792af1-5796-4959-889f-63e7625cacce","Content-Type":"application/json"}});var m=_;class p{constructor(e,t,s,r,n){this._name=e.name,this._link=e.link,this._alt=e.alt,this._cardSelector=t,this._handleImageClick=s,this._handleCardDelete=r,this._id=e._id,this._likes=e.likes||[],this._currentUserId=n,this._isLiked=this._likes.some((e=>e._id===this._currentUserId))}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this._handleLikeButton()})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleCardDelete(this)})),this._cardElement.querySelector(".card__image").addEventListener("click",(()=>{this._handleImageClick(this._link,this._alt,this._name)}))}async _handleLikeButton(){const e=this._cardElement.querySelector(".card__like-button");try{if(this._isLiked){const t=await m.unlikeCard(this._id);if(!("isLiked"in t))throw new Error("Updated card data is missing 'isLiked' property.");this._isLiked=t.isLiked,e.classList.remove("card__like-button_active")}else{const t=await m.likeCard(this._id);if(!("isLiked"in t))throw new Error("Updated card data is missing 'isLiked' property.");this._isLiked=t.isLiked,e.classList.add("card__like-button_active")}}catch(e){console.error("Error liking/unliking card:",e)}}async deleteCard(){try{await m.deleteCard(this._id),this._cardElement.remove(),this._cardElement=null}catch(e){console.error("Error deleting card:",e)}}getView(){const e=document.querySelector(this._cardSelector);this._cardElement=e.content.firstElementChild.cloneNode(!0);const t=this._cardElement.querySelector(".card__image"),s=this._cardElement.querySelector(".card__caption"),r=this._cardElement.querySelector(".card__like-button");return t.src=this._link,t.alt=this._alt,s.textContent=this._name,this._isLiked&&r.classList.add("card__like-button_active"),this._cardElement.dataset.id=this._id,this._setEventListeners(),this._cardElement}}class E{constructor(e,t){this._settings=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._settings.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.textContent="",t.classList.remove(this._settings.errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():(this._submitButton.classList.remove(this._settings.inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this._toggleButtonState()}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}disableButton(){this._submitButton.classList.add(this._settings.inactiveButtonClass),this._submitButton.disabled=!0}}class y{constructor(e){this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this),this._handleMouseDown=this._handleMouseDown.bind(this),this._handleMouseUp=this._handleMouseUp.bind(this),this._isMouseDownOnModal=!1}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}_handleMouseDown(e){e.target.classList.contains("modal_opened")?this._isMouseDownOnModal=!0:this._isMouseDownOnModal=!1}_handleMouseUp(e){this._isMouseDownOnModal&&e.target.classList.contains("modal_opened")&&this.close(e.target),this._isMouseDownOnModal=!1}setEventListeners(){this._popupElement.addEventListener("mousedown",this._handleMouseDown),this._popupElement.addEventListener("mouseup",this._handleMouseUp),this._popupElement.querySelector(".modal__close").addEventListener("click",(()=>this.close()))}}class v extends y{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputs=Array.from(this._popupForm.querySelectorAll(".modal__input")),this._submitButton=this._popupForm.querySelector(".modal__button"),this._submitButtonText=this._submitButton.childNodes[0].textContent.trim()}_getInputValues(){return this._inputValues={},this._inputs.forEach((e=>{this._inputValues[e.name]=e.value})),this._inputValues}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this.renderLoading(!0),this._handleFormSubmit(this._getInputValues()).then((()=>this.close())).catch((e=>console.error("Error submitting form:",e))).finally((()=>this.renderLoading(!1)))}))}renderLoading(e){this._submitButton.childNodes[0].textContent=e?"Saving...":this._submitButtonText}}const f=new E(h,n),g=new E(h,i),L=new E(h,o);f.enableValidation(),g.enableValidation(),L.enableValidation();const b=new class{constructor(e){let{nameSelector:t,aboutSelector:s,avatarSelector:r}=e;this._nameElement=document.querySelector(t),this._aboutElement=document.querySelector(s),this._avatarElement=document.querySelector(r),this._nameElement||console.error(`Element not found for selector: ${t}`),this._aboutElement||console.error(`Element not found for selector: ${s}`),this._avatarElement||console.error(`Element not found for selector: ${r}`)}getUserInfo(){return{name:this._nameElement.textContent,about:this._aboutElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,about:s,avatar:r}=e;t&&(this._nameElement.textContent=t),s&&(this._aboutElement.textContent=s),r&&(this._avatarElement.src=r)}async updateUserInfo(){try{const e=await m.getUserInfo();this.setUserInfo({name:e.name,about:e.about,avatar:e.avatar})}catch(e){console.error(e)}}}({nameSelector:"#profile-name",aboutSelector:"#profile-description",avatarSelector:"#profile-avatar"});let S=null;function k(e){B.open((()=>{e.deleteCard().then((()=>{B.close()})).catch((e=>{console.error("Error deleting card:",e)}))}))}const q=new v("#profile-edit-modal",(async function(e){try{q.renderLoading(!0),await m.updateProfile({name:e.name,about:e.description}),b.setUserInfo({name:e.name,about:e.description}),n.reset(),f.disableButton(),q.close()}catch(e){console.error("Error updating profile:",e)}finally{q.renderLoading(!1)}})),C=new v("#profile-add-modal",(async function(e){try{C.renderLoading(!0);const t=M(await m.addCard({name:e.place,link:e.link}),S);U.addItem(t),i.reset(),g.disableButton(),C.close()}catch(e){console.error("Error adding card:",e)}finally{C.renderLoading(!1)}})),w=new v("#profile-avatar-modal",(async function(e){try{w.renderLoading(!0),await m.updateAvatar(e.link),b.setUserInfo({avatar:e.link}),o.reset(),L.disableButton(),w.close()}catch(e){console.error("Error updating avatar:",e)}finally{w.renderLoading(!1)}})),I=new class extends y{constructor(e){super(e),this._image=this._popupElement.querySelector(".modal__image"),this._place=this._popupElement.querySelector(".modal__heading_type_preview")}open(e,t,s){this._image.src=e,this._image.alt=t,this._place.textContent=s,super.open()}}("#profile-preview-modal"),B=new class extends y{constructor(e){super(e),this._popupForm=this._popupElement.querySelector(".modal__form")}open(e){this._handleConfirmation=e,super.open()}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleConfirmation(),this.close()}))}}("#confirmation-modal");q.setEventListeners(),C.setEventListeners(),w.setEventListeners(),I.setEventListeners(),B.setEventListeners();const U=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:[],renderer:e=>{const t=M(e,S);U.addItem(t,!0)}},".cards__list");function M(e,t){return new p(e,"#card-template",D,k,t).getView()}function D(e,t,s){I.open(e,t,s)}a.addEventListener("click",(()=>{const e=b.getUserInfo();c.value=e.name,u.value=e.about,f.resetValidation(),q.open()})),l.addEventListener("click",(()=>{C.open()})),d.addEventListener("click",(()=>{w.open()})),document.addEventListener("DOMContentLoaded",(async()=>{console.log("DOM fully loaded and parsed");try{const e=await m.getUserInfo();S=e._id,b.setUserInfo(e),(await m.getInitialCards()).forEach((e=>{const t=M(e,S);U.addItem(t)}))}catch(e){console.error("Error during initial load:",e)}})),U.renderItems()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,